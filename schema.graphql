# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  isAdmin: Boolean
  email: String
  password: PasswordState
  photo: UserImage
  lists(
    where: ListWhereInput! = {}
    orderBy: [ListOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [List!]
  listsCount(where: ListWhereInput! = {}): Int
  gifts(
    where: GiftWhereInput! = {}
    orderBy: [GiftOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Gift!]
  giftsCount(where: GiftWhereInput! = {}): Int
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  isAdmin: BooleanFilter
  email: StringFilter
  password: PasswordFilter
  photo: UserImageWhereInput
  lists: ListManyRelationFilter
  gifts: GiftManyRelationFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input ListManyRelationFilter {
  every: ListWhereInput
  some: ListWhereInput
  none: ListWhereInput
}

input GiftManyRelationFilter {
  every: GiftWhereInput
  some: GiftWhereInput
  none: GiftWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  isAdmin: OrderDirection
  email: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  isAdmin: Boolean
  email: String
  password: String
  photo: UserImageRelateToOneForUpdateInput
  lists: ListRelateToManyForUpdateInput
  gifts: GiftRelateToManyForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input UserImageRelateToOneForUpdateInput {
  create: UserImageCreateInput
  connect: UserImageWhereUniqueInput
  disconnect: Boolean
}

input ListRelateToManyForUpdateInput {
  disconnect: [ListWhereUniqueInput!]
  set: [ListWhereUniqueInput!]
  create: [ListCreateInput!]
  connect: [ListWhereUniqueInput!]
}

input GiftRelateToManyForUpdateInput {
  disconnect: [GiftWhereUniqueInput!]
  set: [GiftWhereUniqueInput!]
  create: [GiftCreateInput!]
  connect: [GiftWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  isAdmin: Boolean
  email: String
  password: String
  photo: UserImageRelateToOneForCreateInput
  lists: ListRelateToManyForCreateInput
  gifts: GiftRelateToManyForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input UserImageRelateToOneForCreateInput {
  create: UserImageCreateInput
  connect: UserImageWhereUniqueInput
}

input ListRelateToManyForCreateInput {
  create: [ListCreateInput!]
  connect: [ListWhereUniqueInput!]
}

input GiftRelateToManyForCreateInput {
  create: [GiftCreateInput!]
  connect: [GiftWhereUniqueInput!]
}

type UserImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  user: User
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
  Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input UserImageWhereUniqueInput {
  id: ID
}

input UserImageWhereInput {
  AND: [UserImageWhereInput!]
  OR: [UserImageWhereInput!]
  NOT: [UserImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  user: UserWhereInput
}

input UserImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input UserImageUpdateInput {
  image: Upload
  altText: String
  user: UserRelateToOneForUpdateInput
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input UserImageUpdateArgs {
  where: UserImageWhereUniqueInput!
  data: UserImageUpdateInput!
}

input UserImageCreateInput {
  image: Upload
  altText: String
  user: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type List {
  id: ID!
  name: String
  category: ListCategory
  updated_at: DateTime
  date: CalendarDay
  description: String
  user: User
}

scalar CalendarDay
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ListWhereUniqueInput {
  id: ID
}

input ListWhereInput {
  AND: [ListWhereInput!]
  OR: [ListWhereInput!]
  NOT: [ListWhereInput!]
  id: IDFilter
  name: StringFilter
  category: ListCategoryWhereInput
  updated_at: DateTimeNullableFilter
  date: CalendarDayNullableFilter
  description: StringFilter
  user: UserWhereInput
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input ListOrderByInput {
  id: OrderDirection
  name: OrderDirection
  updated_at: OrderDirection
  date: OrderDirection
  description: OrderDirection
}

input ListUpdateInput {
  name: String
  category: ListCategoryRelateToOneForUpdateInput
  updated_at: DateTime
  date: CalendarDay
  description: String
  user: UserRelateToOneForUpdateInput
}

input ListCategoryRelateToOneForUpdateInput {
  create: ListCategoryCreateInput
  connect: ListCategoryWhereUniqueInput
  disconnect: Boolean
}

input ListUpdateArgs {
  where: ListWhereUniqueInput!
  data: ListUpdateInput!
}

input ListCreateInput {
  name: String
  category: ListCategoryRelateToOneForCreateInput
  updated_at: DateTime
  date: CalendarDay
  description: String
  user: UserRelateToOneForCreateInput
}

input ListCategoryRelateToOneForCreateInput {
  create: ListCategoryCreateInput
  connect: ListCategoryWhereUniqueInput
}

type ListCategory {
  id: ID!
  name: String
  icon: String
  primaryColor: String
  secondaryColor: String
  lists(
    where: ListWhereInput! = {}
    orderBy: [ListOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [List!]
  listsCount(where: ListWhereInput! = {}): Int
}

input ListCategoryWhereUniqueInput {
  id: ID
}

input ListCategoryWhereInput {
  AND: [ListCategoryWhereInput!]
  OR: [ListCategoryWhereInput!]
  NOT: [ListCategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  icon: StringFilter
  primaryColor: StringFilter
  secondaryColor: StringFilter
  lists: ListManyRelationFilter
}

input ListCategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  icon: OrderDirection
  primaryColor: OrderDirection
  secondaryColor: OrderDirection
}

input ListCategoryUpdateInput {
  name: String
  icon: String
  primaryColor: String
  secondaryColor: String
  lists: ListRelateToManyForUpdateInput
}

input ListCategoryUpdateArgs {
  where: ListCategoryWhereUniqueInput!
  data: ListCategoryUpdateInput!
}

input ListCategoryCreateInput {
  name: String
  icon: String
  primaryColor: String
  secondaryColor: String
  lists: ListRelateToManyForCreateInput
}

type Gift {
  id: ID!
  name: String
  link: String
  price: Float
  description: String
  quantity: Int
  degree: Int
  image: GiftImage
  color: String
  size: String
  reserved: Boolean
  updated_at: DateTime
  date: CalendarDay
  reservedBy: String
  user: User
}

input GiftWhereUniqueInput {
  id: ID
}

input GiftWhereInput {
  AND: [GiftWhereInput!]
  OR: [GiftWhereInput!]
  NOT: [GiftWhereInput!]
  id: IDFilter
  name: StringFilter
  link: StringFilter
  price: FloatFilter
  description: StringFilter
  quantity: IntFilter
  degree: IntFilter
  image: GiftImageWhereInput
  color: StringFilter
  size: StringFilter
  reserved: BooleanFilter
  updated_at: DateTimeNullableFilter
  date: CalendarDayNullableFilter
  reservedBy: StringFilter
  user: UserWhereInput
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input GiftOrderByInput {
  id: OrderDirection
  name: OrderDirection
  link: OrderDirection
  price: OrderDirection
  description: OrderDirection
  quantity: OrderDirection
  degree: OrderDirection
  color: OrderDirection
  size: OrderDirection
  reserved: OrderDirection
  updated_at: OrderDirection
  date: OrderDirection
  reservedBy: OrderDirection
}

input GiftUpdateInput {
  name: String
  link: String
  price: Float
  description: String
  quantity: Int
  degree: Int
  image: GiftImageRelateToOneForUpdateInput
  color: String
  size: String
  reserved: Boolean
  updated_at: DateTime
  date: CalendarDay
  reservedBy: String
  user: UserRelateToOneForUpdateInput
}

input GiftImageRelateToOneForUpdateInput {
  create: GiftImageCreateInput
  connect: GiftImageWhereUniqueInput
  disconnect: Boolean
}

input GiftUpdateArgs {
  where: GiftWhereUniqueInput!
  data: GiftUpdateInput!
}

input GiftCreateInput {
  name: String
  link: String
  price: Float
  description: String
  quantity: Int
  degree: Int
  image: GiftImageRelateToOneForCreateInput
  color: String
  size: String
  reserved: Boolean
  updated_at: DateTime
  date: CalendarDay
  reservedBy: String
  user: UserRelateToOneForCreateInput
}

input GiftImageRelateToOneForCreateInput {
  create: GiftImageCreateInput
  connect: GiftImageWhereUniqueInput
}

type GiftImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  gift: Gift
}

input GiftImageWhereUniqueInput {
  id: ID
}

input GiftImageWhereInput {
  AND: [GiftImageWhereInput!]
  OR: [GiftImageWhereInput!]
  NOT: [GiftImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  gift: GiftWhereInput
}

input GiftImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input GiftImageUpdateInput {
  image: Upload
  altText: String
  gift: GiftRelateToOneForUpdateInput
}

input GiftRelateToOneForUpdateInput {
  create: GiftCreateInput
  connect: GiftWhereUniqueInput
  disconnect: Boolean
}

input GiftImageUpdateArgs {
  where: GiftImageWhereUniqueInput!
  data: GiftImageUpdateInput!
}

input GiftImageCreateInput {
  image: Upload
  altText: String
  gift: GiftRelateToOneForCreateInput
}

input GiftRelateToOneForCreateInput {
  create: GiftCreateInput
  connect: GiftWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createUserImage(data: UserImageCreateInput!): UserImage
  createUserImages(data: [UserImageCreateInput!]!): [UserImage]
  updateUserImage(
    where: UserImageWhereUniqueInput!
    data: UserImageUpdateInput!
  ): UserImage
  updateUserImages(data: [UserImageUpdateArgs!]!): [UserImage]
  deleteUserImage(where: UserImageWhereUniqueInput!): UserImage
  deleteUserImages(where: [UserImageWhereUniqueInput!]!): [UserImage]
  createList(data: ListCreateInput!): List
  createLists(data: [ListCreateInput!]!): [List]
  updateList(where: ListWhereUniqueInput!, data: ListUpdateInput!): List
  updateLists(data: [ListUpdateArgs!]!): [List]
  deleteList(where: ListWhereUniqueInput!): List
  deleteLists(where: [ListWhereUniqueInput!]!): [List]
  createListCategory(data: ListCategoryCreateInput!): ListCategory
  createListCategories(data: [ListCategoryCreateInput!]!): [ListCategory]
  updateListCategory(
    where: ListCategoryWhereUniqueInput!
    data: ListCategoryUpdateInput!
  ): ListCategory
  updateListCategories(data: [ListCategoryUpdateArgs!]!): [ListCategory]
  deleteListCategory(where: ListCategoryWhereUniqueInput!): ListCategory
  deleteListCategories(where: [ListCategoryWhereUniqueInput!]!): [ListCategory]
  createGift(data: GiftCreateInput!): Gift
  createGifts(data: [GiftCreateInput!]!): [Gift]
  updateGift(where: GiftWhereUniqueInput!, data: GiftUpdateInput!): Gift
  updateGifts(data: [GiftUpdateArgs!]!): [Gift]
  deleteGift(where: GiftWhereUniqueInput!): Gift
  deleteGifts(where: [GiftWhereUniqueInput!]!): [Gift]
  createGiftImage(data: GiftImageCreateInput!): GiftImage
  createGiftImages(data: [GiftImageCreateInput!]!): [GiftImage]
  updateGiftImage(
    where: GiftImageWhereUniqueInput!
    data: GiftImageUpdateInput!
  ): GiftImage
  updateGiftImages(data: [GiftImageUpdateArgs!]!): [GiftImage]
  deleteGiftImage(where: GiftImageWhereUniqueInput!): GiftImage
  deleteGiftImages(where: [GiftImageWhereUniqueInput!]!): [GiftImage]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  userImages(
    where: UserImageWhereInput! = {}
    orderBy: [UserImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserImage!]
  userImage(where: UserImageWhereUniqueInput!): UserImage
  userImagesCount(where: UserImageWhereInput! = {}): Int
  lists(
    where: ListWhereInput! = {}
    orderBy: [ListOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [List!]
  list(where: ListWhereUniqueInput!): List
  listsCount(where: ListWhereInput! = {}): Int
  listCategories(
    where: ListCategoryWhereInput! = {}
    orderBy: [ListCategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ListCategory!]
  listCategory(where: ListCategoryWhereUniqueInput!): ListCategory
  listCategoriesCount(where: ListCategoryWhereInput! = {}): Int
  gifts(
    where: GiftWhereInput! = {}
    orderBy: [GiftOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Gift!]
  gift(where: GiftWhereUniqueInput!): Gift
  giftsCount(where: GiftWhereInput! = {}): Int
  giftImages(
    where: GiftImageWhereInput! = {}
    orderBy: [GiftImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [GiftImage!]
  giftImage(where: GiftImageWhereUniqueInput!): GiftImage
  giftImagesCount(where: GiftImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
